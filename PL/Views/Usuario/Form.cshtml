@model ML.Usuario
@{
    ViewData["Title"] = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div>
    <div class="container">
        <div class="row">
            <div class="col-ml-12">
                <h3>@ViewBag.Titulo</h3>
                <h3>Ingresa los datos</h3>
                <hr />

            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @using(Html.BeginForm("Form","Usuario",FormMethod.Post, new {enctype = "multipart/form-data" }))
            {
                <div class="row">
                    <div class="col-md-3" style="display: none;">
                        @Html.TextBoxFor(model => model.IdUsuario, new { @class = "hidden form-control", autocomplete = "off" })
                    </div>
               
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.UserName)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-file-person-fill" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", @id = "txtUserName", @placeholder="Zero2503", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.UserName, null, new { @class = "text-danger"})
                        </div>
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Nombre)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-file-person-fill" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", @id = "txtNombre", @placeholder="Andres", autocomplete = "off", @onkeypress = "return SoloLetras(event, 'lblNombre')" })
                            @Html.ValidationMessageFor(model => model.Nombre, null, new { @class = "text-danger"})
                        </div>
                         @Html.Label("", null, new {@id = "lblNombre"})
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.ApellidoPaterno)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-file-person-fill" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control", @id = "txtApellidoPaterno", @placeholder="Ferrer", autocomplete = "off", @onkeypress = "return SoloLetras(event, 'lblApellidoPaterno')"})
                            @Html.ValidationMessageFor(model => model.ApellidoPaterno, null, new { @class = "text-danger"})
                        </div>
                        @Html.Label("", null, new {@id = "lblApellidoPaterno"})
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.ApellidoMaterno)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-file-person-fill" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control", @id = "txtApellidoMaterno", @placeholder="Servin", autocomplete = "off", @onkeypress = "return SoloLetras(event, 'lblApellidoMaterno')"})
                            @Html.ValidationMessageFor(model => model.ApellidoMaterno, null, new { @class = "text-danger"})
                        </div>
                        @Html.Label("", null, new {@id = "lblApellidoMaterno"})
                    </div>
                </div>

                <div class="row">
                    
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Email)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-at" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "txtEmail1", @placeholder="shadow2021@hotmail.com", autocomplete = "off" , @onblur = "return ValidarEmail(event)"  })
                            @Html.ValidationMessageFor(model => model.Email, null, new { @class = "text-danger"})
                        </div>
                        @Html.Label("", null, new {@id = "lblEmail1"})
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Email)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-at" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "txtEmail2",@placeholder="Confirma Email", autocomplete = "off", @onblur = "return VerificarEmail (event, 'lblEmail2')" })
                            @Html.ValidationMessageFor(model => model.Email, null, new { @class = "text-danger"})
                        </div>
                        @Html.Label("", null, new {@id = "lblEmail2"})
                    </div>
                
                    
                </div> 

                <div class="row">
                    
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Password)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-at" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @id = "txtPassword1", @placeholder="Shadow2021", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-danger"})
                        </div>
                        @Html.Label("", null, new {@id = "lblPassword1"})
                    </div>
                
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Password)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-at" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @id = "txtPassword2",@placeholder="Contraseña", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-danger"})
                        </div>
                        @Html.Label("", null, new {@id = "lblPassword2"})
                    </div>
                </div> 

                <div class="row">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.FechaNacimiento)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-calendar-date" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.FechaNacimiento, new { @class = "form-control", @id = "txtFechaNacimiento", @placeholder="20-05-1998", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.FechaNacimiento, null, new { @class = "text-danger"})
                        </div>
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Sexo)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-gender-ambiguous" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Sexo, new { @class = "form-control", @id = "txtSexo", @placeholder="M/F", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Sexo, null, new { @class = "text-danger"})
                        </div>
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.CURP)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-file-earmark-text-fill" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.CURP, new { @class = "form-control", @id = "txtCURP", @placeholder="FESA9805HDFRRN05", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.CURP, null, new { @class = "text-danger"})
                        </div>
                    </div>
                </div>

                <div class="row">


                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Telefono)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-telephone-x-fill" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control", @id = "txtTelefono", @placeholder="0158225480", autocomplete = "off", @onkeypress = "return SoloNumeros(event ,'lblTelefono')" })
                            @Html.ValidationMessageFor(model => model.Telefono, null, new { @class = "text-danger"})
                        </div>
                        @Html.Label("", null, new {@id = "lblTelefono"})
                    </div>
                    
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Celular)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-phone" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Celular, new { @class = "form-control", @id = "txtCelular", @placeholder="5553225480", autocomplete = "off" , @onkeypress = "return SoloNumeros(event ,'lblCelular')"})
                            @Html.ValidationMessageFor(model => model.Celular, null, new { @class = "text-danger"})
                        </div>
                        @Html.Label("", null, new {@id = "lblCelular"})
                    </div>

                    

                    <div class="col-md-3">
                        @Html.Label("Rol")
                     <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1"><i class="bi bi-star" style="color: midnightblue"></i></span>
                        @Html.DropDownListFor(model => model.Rol.IdRol, new SelectList(Model.Rol.Roles, "IdRol", "Nombre"), "Selecciona un rol", new { @class = "form-control", @id = "ddlRol" })
                        @Html.ValidationMessageFor(model => model.Rol.IdRol)
                     </div>
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Estatus)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-star" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Estatus, new { @class = "form-control", @id = "txtEstatus", @placeholder="True/False", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Estatus, null, new { @class = "text-danger"})
                        </div>
                    </div>

                </div>

                <div class="row">

                   
                    <div class="col-md-3">
                        @Html.Label("Pais")
                     <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1"><i class="bi bi-journal-text" style="color: midnightblue"></i></span>
                        @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Pais.Paises, "IdPais", "Nombre"), "Selecciona un pais", new { @class = "form-control", @id = "ddlPais" })
                        @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais)
                     </div>
                    </div>
                    

                    <div class="col-md-4">
                        @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado)
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="basic-addon1"><i class="bi bi-calendar-plus-fill" style="color: midnightblue"></i></span>
                                @if (Model.Direccion.Colonia.Municipio.Estado.Estados == null)
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(string.Empty, "Value", "Text"), "Selecciona una opción", new { @class = "form-control", @id = "ddlEstado" })
                                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado)
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"), "Selecciona una opción", new { @class = "form-control", @id = "ddlEstado" })
                                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado)
                                }
                        </div>
                    </div>  

                    <div class="col-md-4">
                        @Html.LabelFor(model => model.Direccion.Colonia.Municipio)
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="basic-addon1"><i class="bi bi-calendar-plus-fill" style="color: midnightblue"></i></span>
                                @if (Model.Direccion.Colonia.Municipio.Municipios == null)
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(string.Empty, "Value", "Text"), "Selecciona una opción", new { @class = "form-control", @id = "ddlMunicipio" })
                                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.IdMunicipio)
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"), "Selecciona una opción", new { @class = "form-control", @id = "ddlMunicipio" })
                                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.IdMunicipio)
                                }
                        </div>
                    </div>  

                     <div class="col-md-4">
                        @Html.LabelFor(model => model.Direccion.Colonia)
                        <div class="input-group mb-3">
                            <span class="input-group-text" id="basic-addon1"><i class="bi bi-calendar-plus-fill" style="color: midnightblue"></i></span>
                                @if (Model.Direccion.Colonia.Colonias == null)
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(string.Empty, "Value", "Text"), "Selecciona una opción", new { @class = "form-control", @id = "ddlColonia" })
                                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.IdColonia)
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "Nombre"), "Selecciona una opción", new { @class = "form-control", @id = "ddlColonia" })
                                    @Html.ValidationMessageFor(model => model.Direccion.Colonia.IdColonia)
                                }
                        </div>
                    </div>

                    
                    <div class="col-md-3" style="display: none;">
                        @Html.TextBoxFor(model => model.Direccion.IdDireccion, new { @class = "hidden form-control", autocomplete = "off" })
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Direccion.Calle)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-signpost-2" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Direccion.Calle, new { @class = "form-control", @id = "txtCalle", @placeholder="Ejemp: Av.Ixtapaluca", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Direccion.Calle, null, new { @class = "text-danger"})
                        </div>
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Direccion.NumeroInterior)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-hash" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "form-control", @id = "txtNumeroInterior", @placeholder="Ejemp: 9-A", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Direccion.NumeroInterior, null, new { @class = "text-danger"})
                        </div>
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Direccion.NumeroExterior)
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="bi bi-hash" style="color: midnightblue"></i></span>
                            @Html.TextBoxFor(model => model.Direccion.NumeroExterior, new { @class = "form-control", @id = "txtNumeroExterior", @placeholder="Ejemp: 402", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Direccion.NumeroExterior, null, new { @class = "text-danger"})
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-3">
                          @Html.LabelFor(model=> model.Imagen)
                           <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1"><i class="bi bi-card-image"></i></span>
                                <input id="IFImagen" type='file' class="form-control" name="IFImagen" onchange="validateFile(this), readURL(this);  " />
                           </div>
                           @if (Model.Imagen !=null)
                        {
                            <img id="Img" src="data:image/*;base64,@Model.Imagen"style="width:250px ; height:250px" />
                        }
                            else
                        {
                             <img id="Img" src="~/Imagenes/UsuarioPorDefecto.jpg" style="width:250px ; height:250px" />
                        }
                    </div>

                    @Html.HiddenFor(model => model.Imagen)

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="@ViewBag.Accion" class="btn btn-success" />
                        </div>
                    </div>

                </div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-offset-2 col-md-10">
            @Html.ActionLink("Regresar","GetAll","Usuario", htmlAttributes: new {@class = "btn btn-danger"})
        </div>
    </div>

</div>
 


@section Scripts
{
    <script src="~/lib/jquery/dist/jquery.js"></script>

    <script type="text/javascript">
    
     $(document).ready(function () {
                $("#ddlPais").change(function () {
                    $("#ddlEstado").empty();
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("EstadoGetByIdPais")',
                        dataType: 'json',
                        data: { IdPais: $("#ddlPais").val() },
                        success: function (estado) {
                            $("#ddlEstado").append('<option value="0">'+ 'Seleccione una opción' + '</option>');
                            $.each(estado, function (i, estado) {
                                $("#ddlEstado").append('<option value="'
                                                           + estado.idEstado + '">'
                                                           + estado.nombre + '</option>');
                            });
                        },
                        error: function (ex) {
                            alert('Failed.' + ex);
                        }
                    });
                });
            });
  
            

      function validateFile()
      {
                    var allowedExtension = ['jpeg', 'jpg','png'];
                    var fileExtension = document.getElementById('IFImagen').value.split('.').pop().toLowerCase();
                    var isValidFile = false;
                        for(var index in allowedExtension) {
                            if(fileExtension === allowedExtension[index]) {
                                isValidFile = true;
                                break;
                            }
                        }
                        if(!isValidFile) {
                            alert('Las extensiones permitidas son : *.' + allowedExtension.join(', *.'));
                            document.getElementById('IFImagen').value = ""
                        }
                        return isValidFile;
                }
                function readURL(input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#Img')
                          .attr('src', e.target.result);
                    };
                    reader.readAsDataURL(input.files[0]);
                }
      }

    </script>

    <script src="~/lib/jquery/dist/jquery.js"></script>

    <script type="text/javascript">
    
     $(document).ready(function () {
                $("#ddlEstado").change(function () {
                    $("#ddlMunicipio").empty();
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("MunicipioGetByIdEstado")',
                        dataType: 'json',
                        data: { IdEstado: $("#ddlEstado").val() },
                        success: function (municipio) {
                            $("#ddlMunicipio").append('<option value="0">'+ 'Seleccione una opción' + '</option>');
                            $.each(municipio, function (i, municipio) {
                                $("#ddlMunicipio").append('<option value="'
                                                           + municipio.idMunicipio + '">'
                                                           + municipio.nombre + '</option>');
                            });
                        },
                        error: function (ex) {
                            alert('Failed.' + ex);
                        }
                    });
                });
            });

</script>


<script src="~/lib/jquery/dist/jquery.js"></script>

    <script type="text/javascript">
    
     $(document).ready(function () {
                $("#ddlMunicipio").change(function () {
                    $("#ddlColonia").empty();
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("ColoniaGetByIdMunicipio")',
                        dataType: 'json',
                        data: { IdMunicipio: $("#ddlMunicipio").val() },
                        success: function (colonia) {
                            $("#ddlColonia").append('<option value="0">'+ 'Seleccione una opción' + '</option>');
                            $.each(colonia, function (i, colonia) {
                                $("#ddlColonia").append('<option value="'
                                                           + colonia.idColonia + '">'
                                                           + colonia.nombre + '</option>');
                            });
                        },
                        error: function (ex) {
                            alert('Failed.' + ex);
                        }
                    });
                });
            });
    </script>


<link rel="stylesheet" href="//code.jquery.com/ui/1.13.1/themes/base/jquery-ui.css">
<link rel="stylesheet" href="/resources/demos/style.css">
<script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<script src="https://code.jquery.com/ui/1.13.1/jquery-ui.js"></script>

<script type="text/javascript">
            $( function() {
      $( "#txtFechaNacimiento" ).datepicker({dateFormat: 'dd-mm-yy',
                                  changeMonth: true,
                                  changeYear: true});
    } );

            function SoloLetras(e, controlId) 
            {
                var caracter = e.key;
                if (!/^[a-zA-Z]+$/.test(caracter)) 
                {
                     $('#' + controlId).text("Solo se aceptan letras");
                     $('#' + controlId).css({ "color": "red" });
                return false;
                }
                else 
                {
                    $('#' + controlId).text("");
                return true;
                }
            }

            function SoloNumeros(e, controlId) 
            {
                var caracter = e.key;
                if (!/^[0-9]/g.test(caracter)) 
                {
                     $('#' + controlId).text("Solo se aceptan numeros");
                     $('#' + controlId).css({ "color": "red" });
                return false;
                }
                else 
                {
                    $('#' + controlId).text("");
                return true;
                }
            }


            function VerificarPassword(e , controlId) 
            {
                pass1 = document.getElementById("txtPassword1");
                pass2 = document.getElementById("txtPassword2");

                if (pass1.value != pass2.value) {
                    pass1.style.borderColor = "red";
                    pass2.style.borderColor = "red";
                    $('#lblPassword2' + controlId).text("La contraseña no coinside");
                    $('#lblPassword2' + controlId).css({ "color": "red" });

                    return false;

                }
                else 
                {
                    pass1.style.borderColor = "green";
                    pass2.style.borderColor = "green";
                    $('lblPassword1' + controlId).text("");

                    return true;
                }
            }
            

            function VerificarEmail(e , controlId) 
            {
                email1 = document.getElementById("txtEmail1");
                email2 = document.getElementById("txtEmail2");

                if (email1.value != email2.value) {
                    email1.style.borderColor = "red";
                    email2.style.borderColor = "red";
                    $('#lblEmail2' + controlId).text("La contraseña no coinside");
                    $('#lblEmail2' + controlId).css({ "color": "red" });

                    return false;

                }
                else 
                {
                    email1.style.borderColor = "green";
                    email2.style.borderColor = "green";
                    $('lblEmail1' + controlId).text("");

                    return true;
                }
            }

            //function ValidateEmail(e) 
            //{
            //    var regex = /^[a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.([a-zA-Z]{2,4})+$/;
            //    var letra = e.key;
            //    if(regex.test(letra))
            //    {
            //        $("#lblEmail1").css({ "color": "green" });
            //        return true;
            //    }
            //  else
            //  {
            //        $("#lblEmail1").text('correo erroneo');
            //        $('#lblEmail1').css({ "color": "red" });
            //        return false;
            //  }
            //}

            
            function ValidarEmail(e)
                 {
                     var email=document.getElementById("txtEmail1").value;
                     var lblEmail1=document.getElementById("lblEmail1");
                      var regex= /^([a-zA-Z0-9]([^ @@&%$\\\/()=?¿!.,:;]?|\d?)+[a-zA-Z0-9][\.]){1,2}$/;
                if (!regex.test(email)) {
                    $("#lblEmail1").text('correo erroneo');
                    $('#lblEmail1').css({ "color": "red" });
                    return true;
                }
                else 
                {
                    $("#lblEmail1").css({ "color": "green" });
                    return true;
                }
            }
</script>



  
}


                         

